main {
	array int[6] A, B;
	int i, j;
	boolean trash;


	function boolean printArray ( int len ) {
		int i;

		i = 0;

		while( ( i < len ) ) {
			printf B[i];

			i = i + 1;
		}

		return true;
	}

	//  left half is A[iBegin :iMiddle-1]
    // right half is A[iMiddle:iEnd-1   ]
    function boolean TopDownMerge(int iBegin; int iMiddle; int iEnd) {
        int i0, i1, j;

        i0 = iBegin;
        i1 = iMiddle;

        // While there are elements in the left or right runs
        j = iBegin;
        while( ( j < iEnd ) ) {
            // Como el '||' nuestro no para la evaluacion si el 1ยบ es cierto
            // se puede salir del rango del array
            if( ( ( i1 >= iEnd ) || ( i0 >= iEnd ) ) ) {
            	// If left run head exists and is <= existing right run head.
	            if ( ( (i0 < iMiddle) && (i1 >= iEnd) ) ) {
	                B[j] = A[i0];
	                i0 = i0 + 1;
	            }
	            else {
	                B[j] = A[i1];
	                i1 = i1 + 1; 
	            } 
            }

            else {
	            // If left run head exists and is <= existing right run head.
	            if ( ( (i0 < iMiddle) && ( (i1 >= iEnd) || (A[i0] <= A[i1]) ) ) ) {
	                B[j] = A[i0];
	                i0 = i0 + 1;
	            }
	            else {
	                B[j] = A[i1];
	                i1 = i1 + 1; 
	            } 
            }

            j = j + 1;
        }

        return true;
    }





    // A = [5,3,6,1,8,9]
    A[0] = 3; A[1] = 5; A[2] = 6; A[3] = 1; A[4] = 8; A[5] = 9;

    trash = TopDownMerge(0, 3, 6);
    trash = printArray(6);
}

// --- Debe salir: ---
// 1
// 3
// 5
// 6
// 8
// 9

